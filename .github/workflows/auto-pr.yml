name: Auto Generate PR with Template

on:
  push:
    branches:
      - 'feat#*'
      - 'fix#*'
      - 'refactor#*'

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Commit Messages and PR Template
        id: get-content
        run: |
          COMMITS=$(git log origin/main..HEAD --pretty=format:"- %s")
          echo "commits<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          TEMPLATE=$(cat .github/pull_request_template.md)
          echo "template<<EOF" >> $GITHUB_ENV
          echo "$TEMPLATE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate PR Body with AI
        id: generate-body
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitMessages = process.env.commits;
            const prTemplate = process.env.template;
            const geminiApiKey = process.env.GEMINI_API_KEY;

            if (!geminiApiKey) {
              core.setFailed('GEMINI_API_KEY secret is not set.');
              return;
            }

            const prompt = `
              다음 Pull Request 템플릿의 각 항목을, 아래 제공된 커밋 메시지들을 바탕으로 채워줘.
              특히 '요약', '주요 변경 사항', '상세 구현 내용'을 중심으로 작성하고,
              '트러블 슈팅'이나 '알려진 이슈'는 커밋 내용에 근거가 없으면 비워둬도 좋아.
              최종 결과는 완성된 마크다운 텍스트만 반환해줘.

              --- PR 템플릿 ---
              ${prTemplate}

              --- 커밋 메시지 목록 ---
              ${commitMessages}
            `;

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key=${geminiApiKey}`;
            const response = await fetch(apiUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                contents: [{ parts: [{ text: prompt }] }],
              }),
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`Gemini API request failed: ${response.status} ${errorText}`);
              return;
            }

            const result = await response.json();

            if (!result.candidates || result.candidates.length === 0) {
              core.setFailed('Gemini API returned no candidates. This might be due to safety settings.');
              console.log('Full Gemini Response:', JSON.stringify(result, null, 2));
              return;
            }

            const aiResponse = result.candidates[0].content.parts[0].text;
            core.setOutput('body', aiResponse);
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BODY: ${{ steps.generate-body.outputs.body }}
        run: |
          gh pr create \
            --base main \
            --head ${{ github.ref_name }} \
            --title "feat: ${{ github.ref_name }}" \
            --body "$PR_BODY"
